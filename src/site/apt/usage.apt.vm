 ------
 Introduction
 ------
 John Freeman
 ------
 2018-05-10
 ------

 ~~ #%L
 ~~ ktlint-maven-plugin
 ~~ %%
 ~~ Copyright (C) 2018 GantSign Ltd.
 ~~ %%
 ~~ Permission is hereby granted, free of charge, to any person obtaining a copy
 ~~ of this software and associated documentation files (the "Software"), to deal
 ~~ in the Software without restriction, including without limitation the rights
 ~~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 ~~ copies of the Software, and to permit persons to whom the Software is
 ~~ furnished to do so, subject to the following conditions:
 ~~
 ~~ The above copyright notice and this permission notice shall be included in
 ~~ all copies or substantial portions of the Software.
 ~~
 ~~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ~~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ~~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ~~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ~~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 ~~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 ~~ THE SOFTWARE.
 ~~ #L%

Usage

  Some brief examples on how to use this plugin.

* Formatting and checking for violations as part of the build

  Probably the most common use case is to want to both format and check your
  code; add the following plugin configuration to your POM.

+----------+
<build>
  <plugins>
    ...
    <plugin>
      <groupId>com.github.gantsign.maven</groupId>
      <artifactId>ktlint-maven-plugin</artifactId>
      <version>${project.version}</version>
      <executions>
        <execution>
          <id>format-and-lint</id>
          <goals>
            <goal>format</goal>
            <goal>check</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
</build>
+----------+

* Formatting as part of the build

  If you just want ktlint to automatically fix what it can, add the following
  plugin configuration to your POM.

+----------+
<build>
  <plugins>
    ...
    <plugin>
      <groupId>com.github.gantsign.maven</groupId>
      <artifactId>ktlint-maven-plugin</artifactId>
      <version>${project.version}</version>
      <executions>
        <execution>
          <id>format</id>
          <goals>
            <goal>format</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
</build>
+----------+

  To run this from the command line (without adding the plugin to your POM) you
  can run the following from your console:

+----------+
mvn ${project.groupId}:${project.artifactId}:${project.version}:format
+----------+

* Checking for violations as part of the build

  If you just want to drill good habits into your developers, add the following
  plugin configuration to your POM.

+----------+
<build>
  <plugins>
    ...
    <plugin>
      <groupId>com.github.gantsign.maven</groupId>
      <artifactId>ktlint-maven-plugin</artifactId>
      <version>${project.version}</version>
      <executions>
        <execution>
          <id>lint</id>
          <goals>
            <goal>lint</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
</build>
+----------+

  To run this from the command line (without adding the plugin to your POM) you
  can run the following from your console:

+----------+
mvn ${project.groupId}:${project.artifactId}:${project.version}:lint
+----------+

* Generate ktlint report as part of the project reports

  To generate the ktlint report as part of the project reports, add the ktlint
  plugin in the <<<\<reporting\>>>> section of your POM.

+----------+
<reporting>
  <plugins>
    ...
    <plugin>
      <groupId>com.github.gantsign.maven</groupId>
      <artifactId>ktlint-maven-plugin</artifactId>
      <version>${project.version}</version>
    </plugin>
    ...
  </plugins>
</reporting>
+----------+

* Using ktlint reporters as part of the build

  As well as Maven project reports that are part of the Maven site (see above)
  this plugin also supports ktlint reporters:

+----------+
<build>
  <plugins>
    ...
    <plugin>
      <groupId>com.github.gantsign.maven</groupId>
      <artifactId>ktlint-maven-plugin</artifactId>
      <version>${project.version}</version>
      <executions>
        <execution>
          <id>reporter</id>
          <goals>
            <goal>check</goal>
          </goals>
          <configuration>
            <failOnViolation>false</failOnViolation>
            <reporters>
              <reporter>
                <name>plain</name>
                <output>\${project.build.directory}/ktlint.txt</output>
                <properties>
                  <property>
                    <name>group_by_file</name>
                    <value>true</value>
                  </property>
                </properties>
              </reporter>
            </reporters>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
</build>
+----------+

  The built in reporters are <<<plain>>>, <<<json>>> and <<<checkstyle>>>. You
  can also provide a customer reporter (see {{https://github.com/shyiko/ktlint
  for details}}); to use a custom reporter it needs to be added as a Maven
  dependency to the Maven plugin e.g.:

+----------+
<build>
  <plugins>
    ...
    <plugin>
      <groupId>com.github.gantsign.maven</groupId>
      <artifactId>ktlint-maven-plugin</artifactId>
      <version>${project.version}</version>
      <executions>
        <execution>
          <id>check</id>
          <goals>
            <goal>check</goal>
          </goals>
          <configuration>
            <failOnViolation>false</failOnViolation>
            <reporters>
              <reporter>
                <name>my-custom-reporter</name>
                <output>\${project.build.directory}/ktlint.rpt</output>
              </reporter>
            </reporters>
          </configuration>
        </execution>
      </executions>
      <dependencies>
        <dependency>
          <groupId>com.example</groupId>
          <artifactId>my-custom-reporter</artifactId>
          <version>1.0</version>
        </dependency>
      </dependencies>
    </plugin>
    ...
  </plugins>
</build>
+----------+
